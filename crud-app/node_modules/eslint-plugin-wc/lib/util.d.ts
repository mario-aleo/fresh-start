import * as ESTree from 'estree';
import { AST } from 'eslint';
export interface DecoratorNode extends ESTree.BaseNode {
    type: 'Decorator';
    expression: ESTree.Expression;
}
export declare type WithDecorators<T extends ESTree.Node> = T & {
    decorators?: DecoratorNode[];
};
/**
 * Determines if a given decorator is the `@customElement` decorator
 *
 * @param {DecoratorNode} node Decorator to test
 * @return {boolean}
 */
export declare function isCustomElementDecorator(node: DecoratorNode): boolean;
/**
 * Determines if a node is an element class or not.
 *
 * @param {ESTree.Node} node Node to test
 * @param {AST.Token=} jsdoc JSDoc to parse
 * @return {boolean}
 */
export declare function isCustomElement(node: ESTree.Node, jsdoc?: AST.Token | null): node is ESTree.Class;
/**
 * Determines if a node is an extension of HTMLElement class or not.
 *
 * @param {ESTree.Node} node Node to test
 * @return {boolean}
 */
export declare function isNativeCustomElement(node: ESTree.Node): node is ESTree.Class;
